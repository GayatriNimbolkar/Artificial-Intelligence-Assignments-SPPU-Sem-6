

import collections
from collections import defaultdict

visited=set()

graph=defaultdict(list)
print("Gayatri's code")
print("Welcome!!")
n=int(input("Enter the number of nodes in the graph: "))
for i in range(1,n+1):
    node=eval(input("Enter the " + str(i)+ " node: "))
    graph[node]=[]
    adj=int(input("Enter the number of nodes adjacent to " +str(i)+ " : "))
    for j in range(1,adj+1):
        adj_node=eval(input("Enter the adjacent node  " +str(j)+" : "))
        graph[node].append(adj_node)
print("Graph is ---->>  ",graph)

def dfs(visited,graph,root):
            if root not in visited:
                print(root)
                visited.add(root)
                for neighbour in graph[root]:
                    dfs(visited,graph,neighbour)
                    
def bfs(graph, root): 
    visited, queue = set(), collections.deque([root])
    visited.add(root)
    while queue:
        vertex = queue.popleft()
        print(str(vertex) + " ", end="")
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)
     

while True:
    
    print("******MENU*******")
    print("1. DFS")
    print("2. BFS")
    print("3. EXIT")
    c=int(input("Enter your choice: "))
    if c==1:
        a=eval(input("enter the root node: "))
        dfs(visited,graph,a)
                    
    elif c==2:
        b=eval(input("Enter the starting node for traversal: "))
        bfs(graph,b)
        
    
    
    elif c==3:
        break
    
    else:
        print("Invalid choice!!!!!!")
    
    
    
    
    
       


    
